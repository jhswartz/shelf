#!/bin/sh

# -- Constants -------------------------------------------------------------

ELFCLASSNONE=0
ELFCLASS32=1
ELFCLASS64=2

ELFDATANONE=0
ELFDATA2LSB=1
ELFDATA2MSB=2

EV_NONE=0
EV_CURRENT=1

ELFOSABI_NONE=0

ET_NONE=0
ET_REL=1
ET_EXEC=2
ET_DYN=3
ET_CORE=4

EM_NONE=0
EM_X86_64=62

STB_LOCAL=0
STB_GLOBAL=1

STT_NOTYPE=0
STT_FUNC=2
STT_SECTION=3

STV_DEFAULT=0
STV_HIDDEN=2

SHT_NULL=0
SHT_PROGBITS=1
SHT_SYMTAB=2
SHT_STRTAB=3
SHT_NOBITS=8

SHF_WRITE=1
SHF_ALLOC=2
SHF_EXEC=4

PT_LOAD=1

PF_X=1
PF_W=2
PF_R=4


# -- Directives ------------------------------------------------------------

OFFSET=0

usage()
{
	printf "usage: shelf PLAN ...\n"
}

align()
{
	local width=$1
	local offset=$(( ($width - ($OFFSET & ($width - 1))) ))

	while [ $offset -gt 0 ]
	do
		byte 0
		offset=$(($offset - 1))
	done
}

byte()
{
	for byte
	do
		printf $(printf "\\\%03o" $byte)
		OFFSET=$(($OFFSET + 1))
	done
}

word()
{
	local mask8=$(( $((1 << 8)) - 1 ))

	for word
	do
		byte $(( word & $mask8 )) $(( word >> 8 & $mask8 ))
	done
}

long()
{
	local mask16=$(( $((1 << 16)) - 1 ))

	for long
	do
		word $(( long & $mask16 )) $(( long >> 16 & $mask16 ))
	done
}

quad()
{
	local mask32=$(( $((1 << 32)) - 1 ))

	for quad
	do
		long $(( quad & $mask32 )) $(( quad >> 32 & $mask32 ))
	done
}

string()
{
	for string 
	do
		printf "${string}\0"
		OFFSET=$(($OFFSET + ${#string} + 1))
	done
}

magic()
{
	byte 0177 0105 0114 0106 
}

ident()
{
	local class=$1
	local data=$2
	local version=$3
	local os_abi=$4

	magic
	byte $class
	byte $data
	byte $version
	byte $os_abi
	byte 0000 0000 0000 0000 0000 0000 0000 0000
}

header()
{
	local type=$1
	local machine=$2
	local version=$3
	local entry=$4
	local phoff=$5
	local shoff=$6
	local flags=$7
	local ehsize=$8
	local phentsize=$9
	local phnum=${10}
	local shentsize=${11}
	local shnum=${12}
	local shstrndx=${13}

	word $type $machine
	long $version
	quad $entry $phoff $shoff
	long $flags
	word $ehsize
	word $phentsize $phnum
	word $shentsize $shnum $shstrndx
}

file()
{
	local file=$1
	cat $file
	OFFSET=$(($OFFSET + $(wc -c < $file)))
}

sym()
{
	local name=$1
	local info=$2
	local other=$3
	local shndx=$4
	local value=$5
	local size=$6

	long $name
	byte $info
	byte $other
	word $shndx
	quad $value
	quad $size
}

shdr()
{
	local name=$1
	local type=$2
	local flags=$3
	local addr=$4
	local offset=$5
	local size=$6
	local link=$7
	local info=$8
	local addralign=$9
	local entsize=${10}

	long $name
	long $type
	quad $flags
	quad $addr
	quad $offset
	quad $size
	long $link
	long $info
	quad $addralign
	quad $entsize
}

phdr()
{
	local type=$1
	local flags=$2
	local offset=$3
	local vaddr=$4
	local paddr=$5
	local filesz=$6
	local memsz=$7
	local align=$8

	long $type
	long $flags
	quad $offset
	quad $vaddr
	quad $paddr
	quad $filesz
	quad $memsz
	quad $align
}

pass()
{
	local plan=$1
	shift 1

	. $plan
}

main()
{
	if [ $# -eq 0 ]
	then
		usage
		exit 2
	fi

	pass "$@" > /dev/null
	pass "$@"
}

main "$@"
